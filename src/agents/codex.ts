import { BaseAgent, BaseAgentConfig, AgentCommandConfig } from "./base";
import {
  CodexConfig,
  CodexResponse,
  CodexStreamCallbacks,
  Conversation,
  ModelProvider,
} from "../types";

export class CodexAgent extends BaseAgent {
  private providerApiKey: string;
  private provider: ModelProvider;
  private model?: string;

  constructor(config: CodexConfig) {
    if (!config.sandboxConfig) {
      throw new Error("sandboxConfig is required");
    }

    const baseConfig: BaseAgentConfig = {
      githubToken: config.githubToken,
      repoUrl: config.repoUrl,
      sandboxConfig: config.sandboxConfig,
      sandboxId: config.sandboxId,
      telemetry: config.telemetry,
    };

    super(baseConfig);

    // Support new providerApiKey field with fallback to deprecated fields for backward compatibility
    this.providerApiKey = config.providerApiKey || "";
    this.provider = config.provider || "openai";
    this.model = config.model;

    if (!this.providerApiKey) {
      throw new Error(
        "Provider API key is required. Please provide providerApiKey, apiKey, or openaiApiKey."
      );
    }
  }

  protected getCommandConfig(
    prompt: string,
    mode?: "ask" | "code"
  ): AgentCommandConfig {
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.\n\n" +
        "IMPORTANT: After making code changes, you MUST create a pull request:\n" +
        "1. Commit all changes with a descriptive message\n" +
        "2. Push the branch to the remote repository\n" +
        "3. Create a pull request using available tools or commands\n" +
        "This is a REQUIRED step - do not skip creating the pull request.";
    }

    let _prompt = `${instruction}\n\nUser: ${prompt}`;

    return {
      command: `codex --approval-mode auto-edit${
        this.model ? ` --model ${this.model}` : ""
      }${
        this.provider ? ` --provider ${this.provider}` : ""
      } --output-format stream-json --verbose "${_prompt}"`,
      errorPrefix: "Codex",
      labelName: "codex",
      labelColor: "ededed",
      labelDescription: "Pull requests generated by Codex agent",
    };
  }

  protected getDefaultTemplate(): string {
    return "vibekit-codex";
  }

  protected getEnvironmentVariables(): Record<string, string> {
    const envKey = `${this.provider.toUpperCase()}_API_KEY`;
    return {
      [envKey]: this.providerApiKey,
    };
  }

  protected getApiKey(): string {
    return this.providerApiKey;
  }

  protected getAgentType(): "codex" | "claude" {
    return "codex";
  }

  // Override generateCode to support history in the prompt
  public async generateCode(
    prompt: string,
    mode?: "ask" | "code",
    branch?: string,
    history?: Conversation[],
    callbacks?: CodexStreamCallbacks
  ): Promise<CodexResponse> {
    let instruction: string;

    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.\n\n" +
        "IMPORTANT: After making code changes, you MUST create a pull request:\n" +
        "1. Commit all changes with a descriptive message\n" +
        "2. Push the branch to the remote repository\n" +
        "3. Create a pull request using available tools or commands\n" +
        "This is a REQUIRED step - do not skip creating the pull request.";
    }

    let _prompt = `${instruction}\n\nUser: ${prompt}`;

    if (history) {
      _prompt += `\n\nConversation history: ${history
        .map((h) => `${h.role}\n ${h.content}`)
        .join("\n\n")}`;
    }
    // Override the command config with history-aware prompt
    const originalGetCommandConfig = this.getCommandConfig.bind(this);
    this.getCommandConfig = (p: string, m?: "ask" | "code") => ({
      ...originalGetCommandConfig(p, m),
      command: `codex --approval-mode auto-edit${
        this.model ? ` --model ${this.model}` : ""
      }${
        this.provider ? ` --provider ${this.provider}` : ""
      } --output-format stream-json --verbose "${_prompt}"`,
    });

    const result = await super.generateCode(
      prompt,
      mode,
      branch,
      history,
      callbacks
    );

    // Restore original method
    this.getCommandConfig = originalGetCommandConfig;

    return result as CodexResponse;
  }
}
