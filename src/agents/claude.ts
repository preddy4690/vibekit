import { BaseAgent, BaseAgentConfig, AgentCommandConfig } from "./base";
import {
  ClaudeConfig,
  ClaudeResponse,
  ClaudeStreamCallbacks,
  Conversation,
  ModelProvider,
} from "../types";

export class ClaudeAgent extends BaseAgent {
  private anthropicApiKey: string;
  private model?: string;

  constructor(config: ClaudeConfig) {
    if (!config.sandboxConfig) {
      throw new Error("sandboxConfig is required");
    }

    const baseConfig: BaseAgentConfig = {
      githubToken: config.githubToken,
      repoUrl: config.repoUrl,
      sandboxConfig: config.sandboxConfig,
      sandboxId: config.sandboxId,
      telemetry: config.telemetry,
    };

    super(baseConfig);

    // Validate that provider is anthropic if specified (Claude only supports anthropic)
    if (config.provider && config.provider !== "anthropic") {
      throw new Error("Claude agent only supports 'anthropic' provider");
    }

    this.anthropicApiKey = config.providerApiKey;
    this.model = config.model;
  }

  protected getCommandConfig(
    prompt: string,
    mode?: "ask" | "code"
  ): AgentCommandConfig {
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.\n\n" +
        "IMPORTANT: After making code changes, you MUST create a pull request:\n" +
        "1. Commit all changes with a descriptive message\n" +
        "2. Push the branch to the remote repository\n" +
        "3. Create a pull request using available tools or commands\n" +
        "This is a REQUIRED step - do not skip creating the pull request.";
    }

    return {
      command: `echo "${prompt}" | claude -p --append-system-prompt "${instruction}"${
        mode === "ask" ? ' --disallowedTools "Edit" "Replace" "Write"' : ""
      } --output-format stream-json --verbose --model ${
        this.model || "claude-sonnet-4-20250514"
      }`,
      errorPrefix: "Claude",
      labelName: "claude",
      labelColor: "FF6B35",
      labelDescription: "Generated by Claude AI agent",
    };
  }

  protected getDefaultTemplate(): string {
    return "vibekit-claude";
  }

  protected getEnvironmentVariables(): Record<string, string> {
    return {
      ANTHROPIC_API_KEY: this.anthropicApiKey,
    };
  }

  protected getApiKey(): string {
    return this.anthropicApiKey;
  }

  protected getAgentType(): "codex" | "claude" {
    return "claude";
  }

  // Override generateCode to support history in the instruction
  public async generateCode(
    prompt: string,
    mode?: "ask" | "code",
    branch?: string,
    history?: Conversation[],
    callbacks?: ClaudeStreamCallbacks
  ): Promise<ClaudeResponse> {
    let instruction: string;
    if (mode === "ask") {
      instruction =
        "Research the repository and answer the user's questions. " +
        "Do NOT make any changes to any files in the repository.";
    } else {
      instruction =
        "Do the necessary changes to the codebase based on the users input.\n" +
        "Don't ask any follow up questions.\n\n" +
        "IMPORTANT: After making code changes, you MUST create a pull request:\n" +
        "1. Commit all changes with a descriptive message\n" +
        "2. Push the branch to the remote repository\n" +
        "3. Create a pull request using available tools or commands\n" +
        "This is a REQUIRED step - do not skip creating the pull request.";
    }

    if (history && history.length > 0) {
      instruction += `\n\nConversation history: ${history
        .map((h) => `${h.role}\n ${h.content}`)
        .join("\n\n")}`;
    }

    // Override the command config with history-aware instruction
    const originalGetCommandConfig = this.getCommandConfig.bind(this);
    this.getCommandConfig = (p: string, m?: "ask" | "code") => ({
      ...originalGetCommandConfig(p, m),
      command: `echo "${prompt}" | claude -p --append-system-prompt "${instruction}"${
        mode === "ask" ? ' --disallowedTools "Edit" "Replace" "Write"' : ""
      } --output-format stream-json --verbose --dangerously-skip-permissions --model ${
        this.model || "claude-sonnet-4-20250514"
      }`,
    });

    const result = await super.generateCode(
      prompt,
      mode,
      branch,
      history,
      callbacks
    );

    // Restore original method
    this.getCommandConfig = originalGetCommandConfig;

    return result as ClaudeResponse;
  }
}
